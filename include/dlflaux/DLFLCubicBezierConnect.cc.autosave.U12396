#include "DLFLCubicBezierConnect.hh"


namespace DLFL {
    DLFLCubicBezierCurve::DLFLCubicBezierCurve(const Vector3d (&cp)[4])
    {
        cntrl_pnts[0] = cp[0];
        cntrl_pnts[1] = cp[1];
        cntrl_pnts[2] = cp[2];
        cntrl_pnts[3] = cp[3];

        diff_cntrl_pnts[0] = cntrl_pnts[1] - cntrl_pnts[0];
        diff_cntrl_pnts[1] = cntrl_pnts[2] - cntrl_pnts[1];
        diff_cntrl_pnts[2] = cntrl_pnts[3] - cntrl_pnts[2];
    }

    Vector3d DLFLCubicBezierCurve::point_at(const double &t) const
    {
        double u = 1-t;
        Vector3d p =
            (u*u*u)     *   cntrl_pnts[0] +
            (3*u*u*t)   *   cntrl_pnts[1] +
            (3*u*t*t)   *   cntrl_pnts[2] +
            (t*t*t)     *   cntrl_pnts[3] ;
        return p;
    }

    Vector3d DLFLCubicBezierCurve::differentiate_at(const double &t) const
    {
        double u = 1-t;
        Vector3d n =
                (3*u*u)   *   diff_cntrl_pnts[0] +
                (6*u*t)   *   diff_cntrl_pnts[1] +
                (3*t*t)   *   diff_cntrl_pnts[2] ;
        Vector3d derivative = n/sqrt(n.lengthsqr());
        return derivative;
    }


}
