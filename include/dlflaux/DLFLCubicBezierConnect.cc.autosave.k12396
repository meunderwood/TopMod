#include "DLFLCubicBezierConnect.hh"
#include <QDebug>

namespace DLFL {

    CubicBezierCurve::CubicBezierCurve()
    {
        cntrl_pnts[0].set(0.0);
        cntrl_pnts[1].set(0.0);
        cntrl_pnts[2].set(0.0);
        cntrl_pnts[3].set(0.0);

        diff_cntrl_pnts[0].set(0.0);
        diff_cntrl_pnts[1].set(0.0);
        diff_cntrl_pnts[2].set(0.0);
    }

    CubicBezierCurve::CubicBezierCurve(const Vector3d (&cp)[4])
    {
        set(cp);
    }

    void CubicBezierCurve::set(const Vector3d (&cp)[4])
    {
        cntrl_pnts[0] = cp[0];
        cntrl_pnts[1] = cp[1];
        cntrl_pnts[2] = cp[2];
        cntrl_pnts[3] = cp[3];

        diff_cntrl_pnts[0] = cntrl_pnts[1] - cntrl_pnts[0];
        diff_cntrl_pnts[1] = cntrl_pnts[2] - cntrl_pnts[1];
        diff_cntrl_pnts[2] = cntrl_pnts[3] - cntrl_pnts[2];
    }

    Vector3d CubicBezierCurve::point_at(const double &t) const
    {
        double u = 1-t;
        Vector3d p =
            (u*u*u)     *   cntrl_pnts[0] +
            (3*u*u*t)   *   cntrl_pnts[1] +
            (3*u*t*t)   *   cntrl_pnts[2] +
            (t*t*t)     *   cntrl_pnts[3] ;
        return p;
    }

    void CubicBezierCurve::point_at(const double &t, Vector3d &point) const
    {
        double u = 1-t;
        double w0 = u*u*u;
        double w1 = 3*u*u*t;
        double w2 = 3*u*t*t;
        double w3 = t*t*t;
        //set x
        point[0] =
            w0 * cntrl_pnts[0][0] +
            w1 * cntrl_pnts[1][0] +
            w2 * cntrl_pnts[2][0] +
            w3 * cntrl_pnts[3][0] ;
        //set y
        point[1] =
            w0 * cntrl_pnts[0][1] +
            w1 * cntrl_pnts[1][1] +
            w2 * cntrl_pnts[2][1] +
            w3 * cntrl_pnts[3][1] ;
        //set z
        point[2] =
            w0 * cntrl_pnts[0][2] +
            w1 * cntrl_pnts[1][2] +
            w2 * cntrl_pnts[2][2] +
            w3 * cntrl_pnts[3][2] ;
    }

    Vector3d CubicBezierCurve::differentiate_at(const double &t) const
    {
        double u = 1-t;
        Vector3d n =
                (3*u*u)   *   diff_cntrl_pnts[0] +
                (6*u*t)   *   diff_cntrl_pnts[1] +
                (3*t*t)   *   diff_cntrl_pnts[2] ;
        Vector3d derivative = n/sqrt(n.lengthsqr());
        return derivative;
    }

    void CubicBezierCurve::differentiate_at(const double &t, Vector3d &derivative) const
    {
        double u = 1-t;
        double w0 = 3*u*u;
        double w1 = 3*u*t;
        double w2 = 3*t*t;
        //set x
        derivative[0] =
                w0 * diff_cntrl_pnts[0][0] +
                w1 * diff_cntrl_pnts[1][0] +
                w2 * diff_cntrl_pnts[2][0] ;
        //set y
        derivative[1] =
                w0 * diff_cntrl_pnts[0][1] +
                w1 * diff_cntrl_pnts[1][1] +
                w2 * diff_cntrl_pnts[2][1] ;
        //set z
        derivative[2] =
                w0 * diff_cntrl_pnts[0][2] +
                w1 * diff_cntrl_pnts[1][2] +
                w2 * diff_cntrl_pnts[2][2] ;
    }

    CubicBezierBuilder::CubicBezierBuilder()
    {
        is_valid = false;
    }

    CubicBezierBuilder::CubicBezierBuilder(
            const Vector3d &start, const Vector3d &normal_s,
            const Vector3d &end, const Vector3d &normal_e,
            const double &rotation_angle)
    {
        set(start,normal_s, end, normal_e, rotation_angle);
    }

    void CubicBezierBuilder::set(
            const Vector3d &start, const Vector3d &normal_s,
            const Vector3d &end, const Vector3d &normal_e,
            const double &rotation_angle)
    {
        double angle_between = Vector3d::get_angle_between(normal_s, normal_e);
        if (angle_between == 0 || angle_between == M_PI) {
            is_valid = false;
            return;
        }
        if (angle_between>M_PI) {
            angle = 2*M_PI - angle_between;
            point_at_start = end;
            normal_at_start = normal_e;
            point_at_end = start;
            normal_at_end = normal_s;
        }
        else
        {
            angle = angle_between;
            point_at_start = start;
            normal_at_start = normal_s;
            point_at_end = end;
            normal_at_end = normal_e;
        }
        rotation_axis = normal_at_start % normal_at_end;
        rotation_axis/=sqrt(rotation_axis.lengthsqr());
        rotate(rotation_angle);
    }

    bool CubicBezierBuilder::isValid() const
    {
        return is_valid;
    }

    void CubicBezierBuilder::updateBezier(CubicBezierCurve &curve) const
    {
        curve.set(cntrl_pnts);
    }

    void CubicBezierBuilder::rotate(const double &rotation)
    {
        if (rotation >= angle/2) {
            this->is_valid = false;
            return;
        }
        if (rotation <= (angle - 2*M_PI)/2) {
            this->is_valid = false;
            return;
        }
        double cosine = cos(rotation/2);
        double sine = sin(rotation/2);
        Vector3d v_start = cosine * normal_at_start + sine * (rotation_axis % normal_at_start);
        Vector3d v_end   = cosine * normal_at_end   - sine * (rotation_axis % normal_at_end);
        //calculate the control points
        Vector3d p = point_at_end - point_at_start, n = v_end - v_start;
        double a = n.lengthsqr()-1.0;
        double b = -2*(p*n);
        double c = p.lengthsqr();
        double delta = b*b-4*a*c;
        if (delta<0) {
            is_valid = false;
            return;
        }
        is_valid = true;
        double root = sqrt(delta);
        double t1 = (-b + root)/(2*a);
        double t2 = (-b - root)/(2*a);
        double length_param = max(t1,t2);
        if (length_param<=0) {
            is_valid = false;
            return;
        }
        cntrl_pnts[0] = point_at_start;
        cntrl_pnts[1] = point_at_start + length_param * v_start;
        cntrl_pnts[2] = point_at_end   + length_param * v_end;
        cntrl_pnts[3] = point_at_end;
    }


}
